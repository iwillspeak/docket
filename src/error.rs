use std::{io, path::PathBuf};

/// Docket Error Type
///
/// This type contains all the error kinds generated by Docket. Some library
/// functions may return more specific error kinds. All error kinds used within
/// this project should be coercable to this type.
#[derive(Debug)]
pub enum Error {
    /// Source path for documentation set was not a directory
    SourcePathNotADirectory(PathBuf),
    /// A generic IO Error occured
    Io(io::Error),
}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::SourcePathNotADirectory(path) => {
                write!(
                    f,
                    "Source path is not a directory, or can not be opened: {:?}",
                    path
                )
            }
            Error::Io(io) => io.fmt(f),
        }
    }
}

impl std::error::Error for Error {}

impl From<io::Error> for Error {
    fn from(err: io::Error) -> Self {
        Error::Io(err)
    }
}

/// Docket Result Type
///
/// Shorthand result type for functions returning docket errors.
pub type Result<T> = std::result::Result<T, Error>;
